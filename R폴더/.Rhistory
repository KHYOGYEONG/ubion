print(i)
}
for(i in 1:100){
result = result + i
}
print(result)
result = 0
for(i in 1:100){
result = result + i
}
print(result)
#홀수인 경우에는 반복문으로 돌아가겠다는 명령이 next
result = 0
print(result)
#홀수인 경우에는 반복문으로 돌아가겠다는 명령이 next
result = 0
if(i %% 2 == 1){
next
}
for( i in 1:100){
if(i %% 2 == 1){
next
}
result = result + i
}
print(result)
#매개변수가 존재하지 않는 함수를 생성
func_1 <- function(){
print('Hello R')
}
#생성된 함수를 호출
func_1()
func_2 <- function(){
return("Hello R")
}
func_2()
result1 <- func_1()
result2 <- func_2()
# 매개변수 존재하는 함수 생성
# 일반 변수와 차이를 두기위해 앞에 inpu_t을을 입력한다.
# 함수 안에서 입력 값으로 쓰인 걸 표시하기 위함임.
func_3 <- function(input_x, input_y){
result = input_x + input_y
print(result)
}
result3 = func_3(10, 3)
# 인자의 개수가 가변인 경우의 함수를 생성
func_4 <- function(...){
print(c(...))
}
func_4()
func_4(1,2,3,4)
# 함수를 이용해서 커스텀 연산자 생성
"%s%" <- function(input_x, input_y){
result <- input_x ^ input_y
return(result)
}
10 %s% 5
# 매개변수에 기본값을 설정하여 함수를 생성
func_5 <- function(input_x, input_y = 2, input_z = 3){
result <- input_x + input_y + input_z
return(result)
}
func_5(5, 10, 3)
func_5(5)
func_5(10,input_z = 1) #y는 그대로쓰고 z를 바꿔서 쓰는 경우
func_5(10,input_z = 1) #y는 그대로쓰고 z를 바꿔서 쓰는 경우
# 매개변수에 기본값을 설정하여 함수를 생성
func_5 <- function(input_x, input_y = 2, input_z = 3){
result <- input_x + input_y - input_z
return(result)
}
func_5(10,input_z = 1) #y는 그대로쓰고 z를 바꿔서 쓰는 경우
# 2단계 : start부터 end까지 반복을 하는 반복문 생성
for(i in start:end){
# i에 대입 되는 데이터는 -> 벡터 데이터 각 원소가 하나씩 대입, 반복, 실행
# 대입하여 반복 실행
# 3단계 : reult에 누적합을 실행
result = result1+ i
}
# 매개변수가 2개인 함수를 생성
# 매개변수 사이의 값들을 모두 합하여 되돌려주는 함수 생성
func_6 <- function(start, end){
# start부터 end까지의 합
# 1단계 : 누적합을 할 수 있는 데이터 공간 생성(변수 생성)
result = 0
# 2단계 : start부터 end까지 반복을 하는 반복문 생성
for(i in start:end){
# i에 대입 되는 데이터는 -> 벡터 데이터 각 원소가 하나씩 대입, 반복, 실행
# 대입하여 반복 실행
# 3단계 : reult에 누적합을 실행
result = result1+ i
}
return(result)
}
func_6(1,10)
# 2단계 : start부터 end까지 반복을 하는 반복문 생성
for(i in start:end){
# i에 대입 되는 데이터는 -> 벡터 데이터 각 원소가 하나씩 대입, 반복, 실행
# 대입하여 반복 실행
# 3단계 : reult에 누적합을 실행
result = result+ i
}
# 매개변수가 2개인 함수를 생성
# 매개변수 사이의 값들을 모두 합하여 되돌려주는 함수 생성
func_6 <- function(start, end){
# start부터 end까지의 합
# 1단계 : 누적합을 할 수 있는 데이터 공간 생성(변수 생성)
result = 0
# 2단계 : start부터 end까지 반복을 하는 반복문 생성
for(i in start:end){
# i에 대입 되는 데이터는 -> 벡터 데이터 각 원소가 하나씩 대입, 반복, 실행
# 대입하여 반복 실행
# 3단계 : reult에 누적합을 실행
result = result+ i
}
return(result)
}
func_6(1,10)
func_6(1,100)
min(5, 3, 8, 1, 10)
max(10, 3, 6,11, 8)
# result와 두번째 입력 값을 비교하여 작은 값을 result에 담는다.(이걸 반복실행)
# 비교연산자 사용용
if (val > val2){
result <- val2
}
# 함수를 생성
# 매개변수는 2개를 생성
# 첫번째 매개변수는 데이터 하나를 저장
# 두번째 매개변수는 인자의 개수가 가변인 경우
func_8 <- function(val, val2){
# 최소값을 돠돌려주는 함수
result <- val
# result와 두번째 입력 값을 비교하여 작은 값을 result에 담는다.(이걸 반복실행)
# 비교연산자 사용용
if (val > val2){
result <- val2
}
return(result)
}
func_8(10,3)
func_8(3,4)
if(result > i){
result <- i
}
# result와 두번째 입력 값을 비교하여 작은 값을 result에 담는다.(이걸 반복실행)
# 비교연산자 사용
# if문을 해당하는 갯수만큼 반복하면 됨.
for( i in c(...)){
if(result > i){
result <- i
}
}
# 함수를 생성
# 매개변수는 2개를 생성
# 첫번째 매개변수는 데이터 하나를 저장
# 두번째 매개변수는 인자의 개수가 가변인 경우
func_8 <- function(val, ...){
# 최소값을 돠돌려주는 함수
result <- val
# result와 두번째 입력 값을 비교하여 작은 값을 result에 담는다.(이걸 반복실행)
# 비교연산자 사용
# if문을 해당하는 갯수만큼 반복하면 됨.
for( i in c(...)){
if(result > i){
result <- i
}
}
return(result)
}
# 함수를 생성
# 매개변수는 2개를 생성
# 첫번째 매개변수는 데이터 하나를 저장
# 두번째 매개변수는 인자의 개수가 가변인 경우
func_8 <- function(val, ...){
# 최소값을 돠돌려주는 함수
result <- val
# result와 두번째 입력 값을 비교하여 작은 값을 result에 담는다.(이걸 반복실행)
# 비교연산자 사용
# if문을 해당하는 갯수만큼 반복하면 됨.
for( i in c(...)){
if(result > i){
result <- i
}
}
return(result)
}
if(result > i){
result <- i
}
# 함수를 생성
# 매개변수는 2개를 생성
# 첫번째 매개변수는 데이터 하나를 저장
# 두번째 매개변수는 인자의 개수가 가변인 경우
func_8 <- function(val, ...){
# 최소값을 돠돌려주는 함수
result <- val
# result와 두번째 입력 값을 비교하여 작은 값을 result에 담는다.(이걸 반복실행)
# 비교연산자 사용
# if문을 해당하는 갯수만큼 반복하면 됨.
for( i in c(...)){
if(result > i){
result <- i
}
}
return(result)
}
func_8(10,3)
func_8(3,4)
func_8(10,5,6,8)
# 평균을 구하는 함수 생성
mean(1:10)
# 평균을 구하는 함수 생성
# 매개변수가 가변인 함수 생성
func_9 <- function(...){
result = c(...)
print(result) #지역 변수이기 떄문에 함수 안에서 호출(밖에서는 안됨)
}
result = func_9( )
# 평균을 구하는 함수 생성
# 매개변수가 가변인 함수 생성
func_9 <- function(...){
result = 0
for(i in c(...)){
result = result+ i
}
print(result) #지역 변수이기 떄문에 함수 안에서 호출(밖에서는 안됨)
}
func_9(1,2,3,4,5,6,7,8,9,10)
func_9 <- function(...){
result = 0
cnt =0
for(i in c(...)){
result = result+ i
cnt = cnt + 1
}
print(result)
print(cnt)
}
func_9(1,2,3,4,5,6,7,8,9,10)
func_9 <- function(...){
result = 0
cnt =0
for(i in c(...)){
result = result+ i
cnt = cnt + 1
}
print(result)
print(cnt)
mean_f = result / cnt
print(mean_f)
}
func_9(1,2,3,4,5,6,7,8,9,10)
func_9 <- function(...){
#result = 0
cnt =0
for(i in c(...)){
result = result+ i
cnt = cnt + 1
}
print(result)
print(cnt)
mean_f = result / cnt
print(mean_f)
}
func_9(1,2,3,4,5,6,7,8,9,10)
# 매개변수가 2개인 함수를 생성
# 매개변수 사이의 값들을 모두 합계를 구해주는 함수 생성
func_6 <- function(start, end){
# start부터 end까지의 합
# 1단계 : 누적합을 할 수 있는 데이터 공간 생성(변수 생성)
result = 0
# 2단계 : start부터 end까지 반복을 하는 반복문 생성
for(i in start:end){
# i에 대입 되는 데이터는 -> 벡터 데이터 각 원소가 하나씩 대입, 반복, 실행
# 대입하여 반복 실행
# 3단계 : reult에 누적합을 실행
result = result+ i
}
return(result)
}
func_6(1,100)
func_6(1,10)
sum(5,3,2)
length(c(3,2,1))
#위 문제를 함수로 사용해서 푸는 경우
func_10 <- function(...){
result = sum(...) / length(c(...))
return(result)
}
func_10(5,3,2)
func_10(5,3,1)
sum()
test_sum <- function(...){
result=0
for(i in c(...)){
result = result + i
}
return(result)
}
test_sum(5,3,1)
test_len <- function(value){
}
test_len <- function(value){
cnt = 0
for(i in value){
cnt = cnt + 1
}
return(cnt)
}
test_len(c(1,5,3))
test_len()
## 데이터프레임 생성
## 벡터데이터를 이용하여 데이터프레임 생성
name<-c('A', 'B', 'C', 'D', 'E')
grade<- c(1,3,2,2,1)
data.frame(name,grad)
data.frame(name,grade)
data.frame(name,grade)->student #변수에 넣어줘야 저장됨
## 행렬 생성
## cbind() : 열을 추가하는 함수
midturm <- c(70,80,75,60,90)
final<-c(80,90,70,75,85)
cbind(midturm, final)
score<-cbind(midturm, final)
## 행렬과 데이터프레임을 결합
data.frame(student,score)
cbind(student,score)
## 벡터데이터를 생성
gender = c('M','F', 'F', 'M', 'F')
## 데이터프레임과 벡터 데이터와 행렬을 결합
data.frame(student, gender, score)
cbind(student, gender, score)
cbind(student, gender, score) -> students
#길이가 다른 거
test_vec = c(1,2,3,4)
cbind(students, test_vec)
data.frame(students, test_vec)
midturm + final
students
midturm + final
View(students)
# 데이터프레임에서 특정 컬럼을 선택하여 합
students$midturm
# 데이터프레임에서 특정 컬럼을 선택하여 합
students$midturm + sstudents[['final']]
# 데이터프레임에서 특정 컬럼을 선택하여 합
students$midturm + students[['final']]
# 데이터프레임에서 특정 컬럼을 선택하여 합한다.(두 가지 방법($, [[]])
students$midturm + students[['final']] -> total
# cbind(), data.frame() 함수를 이용하여 파생변수 생성
cbind(students, total)
data.frame(students, total)
students$total <- students$midturm + students$final
View(students)
View(students)
students
View(score)
View(score)
View(score)
View(score)
View(students)
View(students)
View(students)
View(students)
students$total / 5
students$total / 2 -> students$mean
students
View(student)
View(student)
View(students)
View(students)
students$total / c(2,2,2,2,2)
students$total /2
View(students)
View(students)
# 새로운 학생 정보를 추가(=행을 추가하는 방법)
data.fame(name='F', grade=1, gender='M', midturm=80,final=70,total=150,mean=75)
# 새로운 학생 정보를 추가(=행을 추가하는 방법)
data.fame(name='F', grade=1, gender='M', midturm=80,final=70,total=150,mean=75)
# 새로운 학생 정보를 추가(=행을 추가하는 방법)
data.frame(name='F', grade=1, gender='M', midturm=80,final=70,total=150,mean=75)
# 새로운 학생 정보를 추가(=행을 추가하는 방법)
new_student <- data.frame(name='F', grade=1, gender='M', midturm=80,final=70,total=150,mean=75)
#데이터프레임 행을 추가
rbind(students, new_student)
data.frame(students, new_student)
#데이터 순서가 바뀌었을 경우우
new_student2<-data.frame(name='G',gender='M', grade=1, midturm=80,final=70,total=150,mean=75)
rbind(students, new_student2)
# 리스트형태 데이터
list_a = list(name = 'test', age = 20)
list_a
list_a$name
list_a$loc
list_a$loc = 'seoul'
list_a
list_a
## 리스트 데이터에서 value가 벡터 데이터인 경우
list_b = list(
name = c('test', 'test2'),
age = c(20,30)
)
list_b
## 리스트 2차원 데이터에서 'test' 문자열 추출하려면
## 리스트에서 Key값을 이용하여 데이터를 추출
list_b$name[1]
list_b['name']
list_b[['name']]
list_b[['name']][1] # 괄호 두번쓰면 벡터데이터로 변경경
###필터
###필터하고 싶을때 : 데이터프레임명[행의 조건, 열의 조건]
students[1,]
View(students)
View(students)
students[c(1,3),]
## 학년이 1학년인 학생의 정보만 출력
students$grade
students$grade == 1
students$grade == 1 -> flag
students[flag,]
!flag
students[!flag,]
students$gender == W
View(students)
View(students)
students$gender == F
students$gender == 'F'
students$gender == 'F' -> flag2
students[flag2, ]
students[flag2, c('midturm', 'final') ]
students$midturm >= 80
students$final >= 80
students$midturm >= 80 ->flag3
students$final >= 80 -> flag4
students[c(flag3, flag4)      , ]
students[, c(flag3, flag)]
students[ ,c(flag3, flag)]
고 기말 성적이 80이상인 학생 출력
students$midturm >= 80 ->flag3
students[ ,c(flag3, flag4)]
students$midturm >= 80 ->flag3
students$final >= 80 -> flag4
students[ ,c(flag3, flag4)]
students$gender == 'F' -> flag2 #인덱스 조건식
students[flag2, c('midturm', 'final') ]  #컬럼 조건식
students$midturm >= 80 & students$final >= 80 ->flag3
students[flag3 ,]
students$midturm >= 80 -> AAA
students$final >= 80 -> BBB
students[AAA& BBB,]
## 컬럼의 순서를 변경
student[c('grade', 'name')]
## 데이터의 순서를 변경하는 함수
#index의 순서 변경
students[c(3,2,1,5,4),]
order(students$grade)
# 학년을 기준으로 오름차순 정렬
## order() : 벡터데이터의 데이터들을 오름차순 정렬 위치 출력
students
order(students$grade)
order(students$grade) -> flag5#위치를 보여줌, 얘를 필터에 넣어주면 끝끝
students[flag5,]
order(students$final, decreasing =  = TRUE)
order(students$final, decreasing = TRUE)
# 다른 방법
order(-students$final)
order(students$name)
order(students$name, decreasing = TRUE)
# 다른 방법
order(-students$final) -> flag6 #숫자 데이터일때만 가능하기 때문에 잘안쓴다.
students[flag6,]
install.packges('dplyr')
install.packages('dplyr')
# 패키지 로드
library(dplyr)
# 컬럼의 이름을 변경
# rename(데이터프레임명, 새로운 컬럼의 이름 = 변경할 컬럼의 이름)
students
rename(students, mean_score = mean)
rename(students, mean_score = mean) -> students
## ifelse(조건식, 참인 경우 출력값, 거짓인 경우 출력값)
ifelse(
students$mean_score >= 70,
'pass',
'fail'
)
ifelse(
students$mean_score >= 75,
'pass',
'fail'
)
ifelse(
students$mean_score >= 75,
'pass',
'fail'
) -> res
students$result <- res
students
ifelse(
students$mean_score > 75,
'pass'
ifelse(students$mean_score == 75,
ifelse(
students$mean_score > 75,
'pass',
ifelse(students$mean_score == 75,
'hold',
'fail'
)
)
